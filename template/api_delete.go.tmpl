{{define "delete"}}
// Delete{{.StructName}} Delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Delete a record from {{.TableName}}
// @Description Delete a single record from {{.TableName}} table in the {{.DatabaseName}} database
// @Tags {{.StructName}}
// @Accept  json
// @Produce  json
{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}// @Param  {{ $field.PrimaryKeyArgName }} path {{ $field.SqlMapping.SwaggerType }} true "{{ $field.ColumnMeta.Name }}"{{end}}{{end}}
// @Success 204 {object} {{.modelPackageName}}.{{.StructName}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 500 {object} {{.apiPackageName}}.HTTPError
// @Router /{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{ {{- $field.PrimaryKeyArgName -}} }{{end}}{{end}} [delete]
// http DELETE "http://{{$.serverHost}}:{{$.serverPort}}/{{pluralize .StructName | toLower}}{{range $field := .TableInfo.CodeFields}}{{ if $field.PrimaryKeyArgName}}/{{ $field.FakeData }}{{end}}{{end}}"
func Delete{{.StructName}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
{{range $field := .TableInfo.CodeFields}}
{{ if $field.PrimaryKeyArgName }}
	{{$field.PrimaryKeyArgName}}, err := {{$field.PrimaryKeyFieldParser}}(ps, "{{$field.PrimaryKeyArgName}}")
	if err != nil {
		returnError(w, r, err)
		return
	}
{{end}}{{end}}

	rowsAffected, err := {{.daoPackageName}}.Delete{{.StructName}}(r.Context(),{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}},{{end}}{{end -}})
	if err != nil {
	    returnError(w, r, err)
	    return
	}

	writeRowsAffected(w, rowsAffected )
}
{{end}}
